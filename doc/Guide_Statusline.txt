*bars-g.statusline*                              Statusline: A beginners guide

‚ñåüî´ Warning
‚ñå I will be glossing over the basics here as there's already `:h 'statusline'`
‚ñå for that and since the goal of this is to teach how to make custom
‚ñå statusline in Lua.

------------------------------------------------------------------------------
üëÄ Introduction

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-example.png

Statusline in Vim(& `Neovim`) is the line/bar you see at the bottom of the
window(sometimes above the `cmdline`).

It can be used to show certain information such as the file name,
current mode, cursor position etc.

You can change what is shown by setting the `'statusline'`

>vim
	:set statusline=Hello,\ Neovim!
<

You have successfully created a custom statusline.

------------------------------------------------------------------------------
üì¶ Statusline item

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-example.png

As cool as it is to have some text in your statusline, it's not
very functional.

Now, you could ask, "But how can you some text that changes over time?"

Vim(& `Neovim`) solves this by using something called as `statusline items`.
They are used as placeholder for various information that get replaced with
their actual value when showing in the statusline.

For example, we can have a statusline like this,

>vim
	:set statusline=\ %t%=%l\ \|\ %c\ 
<

This shows the file name on the left side and the line number & column
number on the right side of the statusline.

So, let's break it down.

‚ñå You don't need to understand all of it as you can always revisit this
‚ñå later.

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ Part ‚îÇ Description                ‚îÇ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ
‚îÇ `\ ` ‚îÇ An escaped space.          ‚îÇ
‚îÇ `%t` ‚îÇ Shows the file name.       ‚îÇ
‚îÇ `%=` ‚îÇ Separator/Spacing.         ‚îÇ
‚îÇ `\ ` ‚îÇ Space.                     ‚îÇ
‚îÇ `%l` ‚îÇ Line number.               ‚îÇ
‚îÇ `\‚îÇ` ‚îÇ An escaped pipe character. ‚îÇ
‚îÇ `\ ` ‚îÇ Space.                     ‚îÇ
‚îÇ `%l` ‚îÇ Column number.             ‚îÇ
‚îÇ `\ ` ‚îÇ Space.                     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

As you can see, by defining a few placeholders we can have a functional
statusline without much effort.

‚ñåüí• Tip
‚ñå If you are interested in statusline items, you should check the help files,
‚ñå :h 'statusline'.

------------------------------------------------------------------------------
üé® Colors

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-example_2.png

Functionality aside our statusline looks kinda bland ü§¢.

So, let's color it!

You can color the statusline by setting the `highlight group`(see
`:h highlight-groups` if you don't know what they are).

Highlight groups can be set by placing the group name between `%#` & `#`.

So, to color something with the `Special` highlight group we add `%#Special#`
before it.

Let's try coloring our previous `statusline`.

>vim
	:set statusline=\ %t\ %#Normal#%=%#Visual#\ %l\ \|\ %c\ 
<

‚ñåüéπ Note
‚ñå The statusline by default has a highlight group(`Statusline`). So,
‚ñå we don't have to change the highlight group for the left side.

I added `%#Normal#` before the separator(`%=`) as I like to have different
colors for the left & right side of the statusline.

Finally, I used the `Visual` highlight group to color the line number &
column number. I added some spaces(`\ `) before the text to make it look nice.

------------------------------------------------------------------------------
üí° Function as statusline

You may have realized by now that manually creating the statusline is
kinda tedious, it's hard to debug and above all it can quickly become hard
to understand(especially if you are a beginner).

So, instead we will define a `function` in Lua that will do all of this for us.

‚ñå Of course, you can also do this in `Vimscript`. But personally I find the
‚ñå Lua version easier to understand.

We will make use of the evaluator(`%!`) statusline item. It will run whatever
is after as code and show the result in the statusline.

So, we can have a statusline that looks like this,

>vim
	"                `v:lua` is used to access things written
	"                        in lua from vimscript.
	:set statusline=%!v:lua.my_statusluine()
<

Looks confusing? Let's break it down.

We have a global function named `my_statusluine`.

>lua
	_G.my_statusluine = function ()
		return "Hello, Neovim!";
	end
<

We are telling the statusline to run `_G.my_statusluine()` and show it's
output in the statusline.

‚ñåüí• Tip
‚ñå You can also add `parameters` to the functions.

>vim
	:set statusline=%!:v:lua.my_statusluine(123)
<

------------------------------------------------------------------------------
üí• Creating a statusline module

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-final.png

You can technically just modify `my_statusluine` to show whatever you want
but you might want to have parts that only show up on specific
scenarios(e.g. `git branch`).

So, it would be simpler to create a file that has all the necessary parts
and logic for the statusline.

Let's create a `statusline.lua` file with the following contents,

‚ñåüéπ Note
‚ñå I am assuming this file is in `~/.config/nvim/lua/`. You will need to
‚ñå modify the text inside `require()` based on where you create the file.

>lua
	local statusline = {};

	--- Helper function for applying
	--- highlight groups.
	---@param hl string
	---@return string
	local function set_hl (hl)
		if type(hl) ~= "string" then
			return "";
		elseif vim.fn.hlexists(hl) == 0 then
			return "";
		else
			return "%#" .. hl .. "#";
		end
	end

	--- Optional, configuration table.
	--- Add this if you like tinkering.
	statusline.config = {};

	--- Function to create the statusline.
	---@return string
	statusline.render = function ()
		local _statusline = "";

		--- Window whose statusline we are
		--- creating.
		---@type integer
		local window = vim.g.statusline_winid;

		--- Buffer of the window.
		---@type integer
		local buffer = vim.api.nvim_win_get_buf(window);

		for _, component in ipairs(statusline.config) do
			local success, part_text = pcall(statusline[component.kind], buffer, window, component);

			if success then
				--- Only add text if a function doesn't fail.
				_statusline = _statusline .. part_text;
			end
		end

		return _statusline;
	end

	--- Optional, setup function.
	statusline.setup = function (config)
		if type(config) == "table" then
			statusline.config = vim.tbl_deep_extend("force", statusline.config, config);
		end

		vim.o.statusline = "%!v:lua.require('statusline').render()";
	end

	return statusline;
<

Now, we can use this statusline in our `init.lua`.

>lua
	--- Change the path to where you created
	--- `statusline.lua`.
	require("statusline").setup();
<

------------------------------------------------------------------------------
üéÅ Components

Just like `statusline items`, we can have our own `components` that do
various things.

So, we will try making some simple components such as,

	‚Ä¢ Mode indicator
	‚Ä¢ Buffer name
	‚Ä¢ Separator
	‚Ä¢ Git branch
	‚Ä¢ Ruler

üß© Mode indicator ~

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-mode.png

We can get the current mode using `nvim_get_mode()`.

I also like adding different text/icon for different modes so we will also
create options for various modes.

>lua
	---@class statusline.mode
	---
	--- Default configuration.
	---@field default { hl: string?, icon: string?, text: string }
	--- Configuration for `string` mode.
	---@field [string] { hl: string?, icon: string?, text: string }

	---@param window integer
	---@param main_config statusline.mode
	statusline.mode = function (_, window, main_config)
		--- Mode shorthand(e.g. `n` for Normal).
		---@type string
		local mode = vim.api.nvim_get_mode().mode;

		--- We will merge a default configuration
		--- and current modes configuration(if it exists).
		---
		--- This way we won't have copy every option
		--- over & over again.
		---@type { hl: string?, icon: string?, text: string }
		local config = vim.tbl_extend("force", main_config.default or {}, main_config[mode] or {});

		---@type integer Window width.
		local win_width = vim.api.nvim_win_get_width(window);
		---@type integer Minimum width.
		local min_width = math.floor(vim.o.columns * 0.4);

		--- We can use `..` for this but I prefer
		--- this approach.
		return table.concat({
			set_hl(config.hl),

			" ",
			config.icon or "",
			--- Don't show text if a window doesn't
			--- have enough space.
			--- If the user didn't set a text then
			--- we will show the mode shorthand.
			win_width >= min_width and (config.text or mode) or "",
			" "
		});
	end
<

Let's add this component to the configuration.

>lua
	statusline.config = {
		--- Other components.
		{
			kind = "mode",

			default = { icon = "ùõå ", hl = "Search" },

			n = { text = "Normal" },
			i = { text = "Insert" },
			v = { text = "Visual" },
			V = { text = "Visual(line)" },
			c = { text = "Command" },
		},
	};
<

üß© Buffer name ~

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-bufname.png

You can get a buffer's name using `nvim_buf_get_name()`. However, this is
typically the absolute path of a file so, we need to modify it a bit.

‚ñå Technically, you can use something like `%f` for this too. But I want it
‚ñå to show different text for special files(e.g. terminals).

>lua
	---@class statusline.bufname
	---
	---@field default bufname.opts
	---@field custom bufname.opts[]
	---
	---@class bufname.opts
	---
	--- Pattern, only valid when inside
	--- `custom`.
	---@field pattern? string
	---
	--- Text show for this bufname.
	---@field text? string
	---
	--- Optional icon before the text.
	---@field icon? string
	---
	--- Highlight group for the component.
	---@field hl? string


	---@param buffer integer
	---@param main_config statusline.bufname
	statusline.bufname = function (buffer, _, main_config)
		---@type string
		local bufname = vim.api.nvim_buf_get_name();
		---@type string
		local tail = vim.fn.fnamemodify(bufname, "%t");

		local config = main_config.default or {};

		for _, entry in ipairs(main_config.custom or {}) do
			if string.match(bufname, entry.pattern or "") then
				config = vim.tbl_extend("force", config, entry);
				break;
			end
		end

		return table.concat({
			set_hl(config.hl),

			" ",
			config.icon or "",
			--- If a custom text isn't provided,
			--- then show the tail of the path
			--- which is typically the file name.
			config.text or tail,
			" "
		});
	end
<

Now, let's add it to our config,

>lua
	statusline.config = {
		--- Other components.
		{
			kind = "bufname",

			default = { icon = "‚õµ ", hl = "DiffText" },

			custom = {
				{
					--- Empty buffer names will show
					--- "No name" as the text.
					pattern = "^$",

					text = "No name"
				},
				{
					--- Terminal buffers will show
					--- different icon.
					pattern = "^term%:%/%/.-%/%d+%:.+$",

					icon = "üíª "
				}
			}
		},
	};
<

üß© Separator ~

Separators can be used to add spaces between parts of the statusline. For
this tutorial we have a left & right side, so we only need a single separator.

>lua
	---@class statusline.separator
	---
	---@field hl? string


	---@param config statusline.separator
	---@return string
	statusline.separator = function (_, _, config)
		return set_hl(config.hl) .. "%=";
	end
<

Now, we will add it to our config.

>lua
	statusline.config = {
		--- Other components.
		{
			kind = "separator",

			--- We need to reset the highlight
			--- group.
			hl = "Normal"
		},
	};
<

üß© Git branch ~

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-git.png

By using `git` CLI we can get the current branch of a repository. For this
we will use `getcwd()` to the repository and then run a shell
command(via `system()`) to get the branch.

>lua
	---@class statusline.git
	---
	---@field kind "git_branch"

	---@field icon? string
	---@field hl? string


	---@param window integer
	---@param config statusline.git
	---@return string
	statusline.git_branch = function (_, window, config)
		--- Current working directory.
		---@type string
		local cwd;

		---@type integer Current time(in nanoseconds.
		local now = vim.uv.hrtime();

		vim.api.nvim_win_call(window, function ()
			cwd = vim.fn.getcwd(window);
		end);

		if type(cwd) ~= "string" then
			--- Couldn't find working
			--- directory.
			return "";
		elseif vim.g.__git_branch then
			---@type integer
			local before = vim.g.__branch_time or 0;

			--- Only update every 100 milliseconds.
			--- 1 milliseconds = 1e‚Å∂ nanoseconds
			if now - before < (100 * 1e6) then
				--- Not enough time has passed.
				--- Use cached value.

				return table.concat({
					set_hl(config.hl),

					" ",
					config.icon or "",
					vim.w[window].__git_branch,
					" "
				});
			end
		end

		local in_repo = vim.fn.system({
			"git",
			"-C",
			cwd,
			"rev-parse",
			"--is-inside-work-tree"
		});

		if not in_repo or string.match(in_repo, "^true") == nil then
			--- We aren't inside a repository.
			return "";
		end

		---@type string
		local branch = vim.fn.system({
			"git",
			"-C",
			cwd,
			"branch",
			"--show-current"
		});

		--- Break the command output into lines.
		branch = vim.split(branch or "", "\n", { trimempty = true });

		if not branch[1] then
			return "";
		elseif branch[1]:match("^fatal%:") then
			return "";
		elseif branch[1]:match("^error%:") then
			return "";
		else
			vim.g.__git_branch = branch[1];
			vim.g.__branch_time = now;

			return table.concat({
				set_hl(config.hl),

				" ",
				config.icon or "",
				branch[1],
				" "
			});
		end
	end
<

Now we add it to our config!

>lua
	statusline.config = {
		--- Other components.
		{
			kind = "git_branch",

			--- We need to reset the highlight
			--- group.
			hl = "Comment"
		},
	};
<

üß© Ruler ~

https://github.com/OXY2DEV/bars.nvim/blob/images/v2/wiki/bars.statusline-ruler.png

Okay, final part!

A statusline wouldn't be complete without showing the cursor position. So,
let's make a ruler component to do that.

>lua
	---@class statusline.ruler
	---
	---@field kind "ruler"
	---
	---@field icon? string
	---@field separator string
	---@field hl? string


	---@param window integer
	---@param config statusline.ruler
	---@return string
	statusline.ruler = function (_, window, config)
		---@type [ integer, integer ]
		local cursor = vim.api.nvim_win_get_cursor(window);

		return table.concat({
			set_hl(config.hl),

			" ",
			config.icon or "",
			cursor[1],
			config.separator or " ",
			cursor[2],
			" "
		});
	end
<

And modify the config.

>lua
	statusline.config = {
		--- Other components.
		{
			kind = "ruler",

			--- We need to reset the highlight
			--- group.
			hl = "Visual",

			icon = "üìê ",
			separator = " ‚Ä¢ "
		},
	};
<

------------------------------------------------------------------------------
üî• More example

You can check more complex components, per-window configuration, click
handling etc. in the source file.

	‚Ä¢ https://github.com/OXY2DEV/bars.nvim/blob/main/plugin/bars.lua#L37-L100
	  Shows how to set up per-window statusline.

	‚Ä¢ https://github.com/OXY2DEV/bars.nvim/blob/main/lua/bars/statusline.lua
	  Shows how to manage per-window configuration, set & reset the
	  statusline of a window and rendering statusline.

	‚Ä¢ https://github.com/OXY2DEV/bars.nvim/blob/main/lua/bars/components/statusline.lua
	  Shows how various components are made.

------------------------------------------------------------------------------

	‚Ä¢ https://github.com/OXY2DEV/bars.nvim/blob/main/lua/definitions/statusline.lua
	  Shows type definitions for the statusline.


vim:ft=help:tw=78:colorcolumn=78:
